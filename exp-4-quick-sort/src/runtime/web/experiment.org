
#+TITLE:Quick Sort experiment 
#+AUTHOR: VLEAD
#+DATE: [2017-07-18 Tuesday]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil'

* Introduction
  This experiment demonstrates the quick sort in an interactice way using the notation of partition and then splits the array into left,pivot and right arrays. It then applies the quick sort to all the three subarrays.

* Code and narration 
** Index HTML
*** HTML for the experiment
#+BEGIN_SRC  html :tangle templates/index.html :eval no :noweb yes
		
 <!doctype html>
<head>
<meta charset="utf-8">
<title>Dagre D3 Demo: Sentence Tokenization</title>

<link rel="stylesheet" href="demo.css">
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="../../../../../node_modules/dagre-d3/dist/dagre-d3.js"></script>
	
<style id="css">
/* This sets the color for "TK" nodes to a light blue green. */
g.type-TK > rect {
  fill: #00ffd0;
}

text {
  font-weight: 300;
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serf;
  font-size: 14px;
}

.node rect {
  stroke: #999;
  fill: #fff;
  stroke-width: 1.5px;
}

.edgePath path {
  stroke: #333;
  stroke-width: 1.5px;
}
</style>
</head>
<body>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
</head>
<body>
<div class="jumbotron text-center">
  <h2>Quick Sort</h2>
</div>

<div class="form-group">
  <label for="arr" style="font-size:150%">Please enter the array to sort</label>
  <input type="text" class="form-control" style="width:100%;font-size: 150%" id="arr">
</div>

<div>
<button type="button" id="but1" style="position:absolute;left:49%" class="btn btn-success btn-lg" onclick="helper()">Sort</button>

</div>

<br><br><br/>

<svg id="svg-canvas" width=100% height=600 style="position: absolute;left:25%"></svg>



<script src="../static/js/quick.js"></script>
</body>


#+END_SRC


** JS
 - Helper to call various functions

#+BEGIN_SRC  javascript :tangle /static/js/quick.js :eval no :noweb yes
function helper()
{
	// Array to be sorted
	var array=document.getElementById('arr').value
	var arr=array.split("")
	var sorted_array=quick_Sort(arr,1)
	drawedge(sorted_array);
	draw();
	
}

#+END_SRC
- Global definition of the final graph.
- Global set of variables
#+BEGIN_SRC  javascript :tangle /static/js/quick.js :eval no :noweb yes
var g = new dagreD3.graphlib.Graph()
.setGraph({})
.setDefaultEdgeLabel(function() { return {}; });
var visited=[];
var leaf=[];


#+END_SRC
- Main quick sort function.
- Nodes are also constructed with id and data
  - The top node has id as i;
  - The partitioned node which marks the position of pivot with brackets is marked below with id as -i.
  
  - Child nodes are marked by the ID's 3i-1 ,3*i & 3*i+1 rule every node has three childre.
  - Data is unsorted arrays.
- All the id's are pushed into the visited array.
- Quick sort is called on the three subarrays i.e. left - for smaller elements , pivot-for pivot and right-for larger elements.

#+BEGIN_SRC  javascript :tangle /static/js/quick.js :eval no :noweb yes
function quick_Sort(origArray,count) 
{
	if(origArray.length==0)return[];

	var lab=origArray.toString();


	g.setNode(count,{ label: lab,class: "type-TOP" ,labelStyle: "font-weight: bold",id:count});

	visited.push(count)

	if (origArray.length <= 1) 
	{ 
		leaf.push(count)
		return origArray;
	} 
	else
	{

		var left = [];
		var right = [];
		var newArray = [];
		var pivot = origArray.pop();
		var length = origArray.length;

		for (var i = 0; i < length; i++) 
		{
			if (origArray[i] <=pivot)
			{
				left.push(origArray[i]);
			} 
			else if(origArray[i]>pivot)
			{
				right.push(origArray[i]);
			}
		}

		var temp=left.toString()+',['+pivot.toString()+'],'+right.toString();

		g.setNode(-count,{ label: temp,class: "type-TOP" ,labelStyle: "font-weight: bold",id:-count});
		visited.push(-count)


		return newArray.concat(quick_Sort(left,3*count-1), quick_Sort([pivot],3*count),quick_Sort(right,3*count+1));
	}
}	
#+END_SRC

- Main function which renders the graph after we have added nodes and edges.
- Basic d3 selectors along with dagre.js syntax.
#+BEGIN_SRC  javascript :tangle /static/js/quick.js :eval no :noweb yes
function draw()
{
	g.nodes().forEach(function(v) 
	{
		 var node = g.node(v);
	  	// Round the corners of the nodes
	  	node.rx = node.ry = 5;
	})

	// Create the renderer
	var render = new dagreD3.render();

	// Set up an SVG group so that we can translate the final graph.
	var svg = d3.select("svg"),
	svgGroup = svg.append("g");

	// Run the renderer. This is what draws the final graph.
	render(d3.select("svg g"), g);

	// Center the graph
	var xCenterOffset = (svg.attr("width") - g.graph().width) / 2;
	svgGroup.attr("transform", "translate(" + xCenterOffset + ", 20)");
	svg.attr("height", g.graph().height + 40);

}
#+END_SRC

- Funtion which connects individual components.
- First the nodes are connected which are with id i and -i as they are normal arrays and partitioned arrays.
- Then -i node is connected to 3*i-1, 3*i and 3*i+1 with suitable labels.
- The leaf nodes are there in global leaf array which when combined gives the final sorted array.

#+BEGIN_SRC  javascript :tangle /static/js/quick.js :eval no :noweb yes

function drawedge(arr)
{
	for(i=1;i<=1045;i++)
	{
			
		
		if(visited.indexOf(i)!=-1 && visited.indexOf(-i)!=-1)
		{
			
			g.setEdge(i,-i,{label:"PARTITION"});
		}

		
	}
	for(i=1;i<=1045;i++)
	{
		if(visited.indexOf(-i)!=-1 && visited.indexOf(3*i-1)!=-1)
		{
			g.setEdge(-i,3*i-1,{label:"LEFT"});
			
		}
	}
	for(i=1;i<=1045;i++)
	{
		if(visited.indexOf(-i)!=-1 && visited.indexOf(3*i)!=-1)
		{
			g.setEdge(-i,3*i,{label:"PIVOT"});
			
		}
	}

	for(i=1;i<=1045;i++)
	{
		if(visited.indexOf(-i)!=-1 && visited.indexOf(3*i+1)!=-1)
		{
			g.setEdge(-i,3*i+1,{label:"RIGHT"});
			
		}
	}

	g.setNode(0,{ label:arr.toString(),class: "type-TOP" });
	
	for(i=0;i<leaf.length;i++)
	{
		g.setEdge(leaf[i],0,{label:"SORTEDARRAY"});
		
	}

} 

#+END_SRC
